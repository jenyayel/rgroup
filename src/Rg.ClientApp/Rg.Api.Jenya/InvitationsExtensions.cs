// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Rg.ClientApp;
using Rg.ClientApp.Models;

namespace Rg.ClientApp
{
    public static partial class InvitationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IInvitations.
        /// </param>
        public static InvitationsIssued GetAsync(this IInvitations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInvitations)s).GetAsyncAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IInvitations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<InvitationsIssued> GetAsyncAsync(this IInvitations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Rg.ClientApp.Models.InvitationsIssued> result = await operations.GetAsyncWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IInvitations.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        public static InvitationsIssued PostAsyncByRequest(this IInvitations operations, InvitationRequest request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInvitations)s).PostAsyncByRequestAsync(request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IInvitations.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<InvitationsIssued> PostAsyncByRequestAsync(this IInvitations operations, InvitationRequest request, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Rg.ClientApp.Models.InvitationsIssued> result = await operations.PostAsyncByRequestWithOperationResponseAsync(request, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
