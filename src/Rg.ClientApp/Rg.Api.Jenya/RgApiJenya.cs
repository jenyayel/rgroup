// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Net.Http;
using Microsoft.Rest;
using Rg.ClientApp;

namespace Rg.ClientApp
{
    public partial class RgApiJenya : ServiceClient<RgApiJenya>, IRgApiJenya
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
            set { this._baseUri = value; }
        }
        
        private ServiceClientCredentials _credentials;
        
        /// <summary>
        /// Credentials for authenticating with the service.
        /// </summary>
        public ServiceClientCredentials Credentials
        {
            get { return this._credentials; }
            set { this._credentials = value; }
        }
        
        private IAlbums _albums;
        
        public virtual IAlbums Albums
        {
            get { return this._albums; }
        }
        
        private IComment _comment;
        
        public virtual IComment Comment
        {
            get { return this._comment; }
        }
        
        private IInvitations _invitations;
        
        public virtual IInvitations Invitations
        {
            get { return this._invitations; }
        }
        
        private IMedia _media;
        
        public virtual IMedia Media
        {
            get { return this._media; }
        }
        
        private INotification _notification;
        
        public virtual INotification Notification
        {
            get { return this._notification; }
        }
        
        private IProfile _profile;
        
        public virtual IProfile Profile
        {
            get { return this._profile; }
        }
        
        private ISearch _search;
        
        public virtual ISearch Search
        {
            get { return this._search; }
        }
        
        private ITest _test;
        
        public virtual ITest Test
        {
            get { return this._test; }
        }
        
        private ITimeline _timeline;
        
        public virtual ITimeline Timeline
        {
            get { return this._timeline; }
        }
        
        private IUploadMedia _uploadMedia;
        
        public virtual IUploadMedia UploadMedia
        {
            get { return this._uploadMedia; }
        }
        
        private IUserImages _userImages;
        
        public virtual IUserImages UserImages
        {
            get { return this._userImages; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RgApiJenya class.
        /// </summary>
        public RgApiJenya()
            : base()
        {
            this._albums = new Albums(this);
            this._comment = new Comment(this);
            this._invitations = new Invitations(this);
            this._media = new Media(this);
            this._notification = new Notification(this);
            this._profile = new Profile(this);
            this._search = new Search(this);
            this._test = new Test(this);
            this._timeline = new Timeline(this);
            this._uploadMedia = new UploadMedia(this);
            this._userImages = new UserImages(this);
            this._baseUri = new Uri("https://microsoft-apiappc0ca0972af5842ffbdf629275d59d5b9.azurewebsites.net");
        }
        
        /// <summary>
        /// Initializes a new instance of the RgApiJenya class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public RgApiJenya(params DelegatingHandler[] handlers)
            : base(handlers)
        {
            this._albums = new Albums(this);
            this._comment = new Comment(this);
            this._invitations = new Invitations(this);
            this._media = new Media(this);
            this._notification = new Notification(this);
            this._profile = new Profile(this);
            this._search = new Search(this);
            this._test = new Test(this);
            this._timeline = new Timeline(this);
            this._uploadMedia = new UploadMedia(this);
            this._userImages = new UserImages(this);
            this._baseUri = new Uri("https://microsoft-apiappc0ca0972af5842ffbdf629275d59d5b9.azurewebsites.net");
        }
        
        /// <summary>
        /// Initializes a new instance of the RgApiJenya class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public RgApiJenya(HttpClientHandler rootHandler, params DelegatingHandler[] handlers)
            : base(rootHandler, handlers)
        {
            this._albums = new Albums(this);
            this._comment = new Comment(this);
            this._invitations = new Invitations(this);
            this._media = new Media(this);
            this._notification = new Notification(this);
            this._profile = new Profile(this);
            this._search = new Search(this);
            this._test = new Test(this);
            this._timeline = new Timeline(this);
            this._uploadMedia = new UploadMedia(this);
            this._userImages = new UserImages(this);
            this._baseUri = new Uri("https://microsoft-apiappc0ca0972af5842ffbdf629275d59d5b9.azurewebsites.net");
        }
        
        /// <summary>
        /// Initializes a new instance of the RgApiJenya class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public RgApiJenya(Uri baseUri, params DelegatingHandler[] handlers)
            : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._baseUri = baseUri;
        }
        
        /// <summary>
        /// Initializes a new instance of the RgApiJenya class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials for authenticating with the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public RgApiJenya(ServiceClientCredentials credentials, params DelegatingHandler[] handlers)
            : this(handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }
        
        /// <summary>
        /// Initializes a new instance of the RgApiJenya class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials for authenticating with the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public RgApiJenya(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers)
            : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._baseUri = baseUri;
            this._credentials = credentials;
            
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }
    }
}
