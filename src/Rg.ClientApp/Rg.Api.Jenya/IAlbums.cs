// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Rg.ClientApp.Models;

namespace Rg.ClientApp
{
    public partial interface IAlbums
    {
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AlbumSummary>>> GetWithOperationResponseAsync(CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<AlbumDetail>> GetByAlbumidWithOperationResponseAsync(int albumId, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='userId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AlbumSummary>>> GetByUseridWithOperationResponseAsync(string userId, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='createRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<AlbumSummary>> PostByCreaterequestWithOperationResponseAsync(AlbumDefinition createRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='commentRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PostCommentByAlbumidAndCommentrequestWithOperationResponseAsync(int albumId, CommentRequest commentRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='createRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PostImageByAlbumidAndCreaterequestWithOperationResponseAsync(int albumId, AddImageToAlbum createRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='likeRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PostLikeAlbumByAlbumidAndLikerequestWithOperationResponseAsync(int albumId, LikeRequest likeRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='modifyRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PutByIdAndModifyrequestWithOperationResponseAsync(int id, AlbumDefinition modifyRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
