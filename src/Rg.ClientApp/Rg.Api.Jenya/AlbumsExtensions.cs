// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Rg.ClientApp;
using Rg.ClientApp.Models;

namespace Rg.ClientApp
{
    public static partial class AlbumsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        public static IList<AlbumSummary> Get(this IAlbums operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<AlbumSummary>> GetAsync(this IAlbums operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Rg.ClientApp.Models.AlbumSummary>> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        public static AlbumDetail GetByAlbumid(this IAlbums operations, int albumId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).GetByAlbumidAsync(albumId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<AlbumDetail> GetByAlbumidAsync(this IAlbums operations, int albumId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Rg.ClientApp.Models.AlbumDetail> result = await operations.GetByAlbumidWithOperationResponseAsync(albumId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='userId'>
        /// Required.
        /// </param>
        public static IList<AlbumSummary> GetByUserid(this IAlbums operations, string userId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).GetByUseridAsync(userId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='userId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<AlbumSummary>> GetByUseridAsync(this IAlbums operations, string userId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Rg.ClientApp.Models.AlbumSummary>> result = await operations.GetByUseridWithOperationResponseAsync(userId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='createRequest'>
        /// Required.
        /// </param>
        public static AlbumSummary PostByCreaterequest(this IAlbums operations, AlbumDefinition createRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).PostByCreaterequestAsync(createRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='createRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<AlbumSummary> PostByCreaterequestAsync(this IAlbums operations, AlbumDefinition createRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Rg.ClientApp.Models.AlbumSummary> result = await operations.PostByCreaterequestWithOperationResponseAsync(createRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='commentRequest'>
        /// Required.
        /// </param>
        public static object PostCommentByAlbumidAndCommentrequest(this IAlbums operations, int albumId, CommentRequest commentRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).PostCommentByAlbumidAndCommentrequestAsync(albumId, commentRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='commentRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostCommentByAlbumidAndCommentrequestAsync(this IAlbums operations, int albumId, CommentRequest commentRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostCommentByAlbumidAndCommentrequestWithOperationResponseAsync(albumId, commentRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='createRequest'>
        /// Required.
        /// </param>
        public static object PostImageByAlbumidAndCreaterequest(this IAlbums operations, int albumId, AddImageToAlbum createRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).PostImageByAlbumidAndCreaterequestAsync(albumId, createRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='createRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostImageByAlbumidAndCreaterequestAsync(this IAlbums operations, int albumId, AddImageToAlbum createRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostImageByAlbumidAndCreaterequestWithOperationResponseAsync(albumId, createRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='likeRequest'>
        /// Required.
        /// </param>
        public static object PostLikeAlbumByAlbumidAndLikerequest(this IAlbums operations, int albumId, LikeRequest likeRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).PostLikeAlbumByAlbumidAndLikerequestAsync(albumId, likeRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='albumId'>
        /// Required.
        /// </param>
        /// <param name='likeRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostLikeAlbumByAlbumidAndLikerequestAsync(this IAlbums operations, int albumId, LikeRequest likeRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostLikeAlbumByAlbumidAndLikerequestWithOperationResponseAsync(albumId, likeRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='modifyRequest'>
        /// Required.
        /// </param>
        public static object PutByIdAndModifyrequest(this IAlbums operations, int id, AlbumDefinition modifyRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlbums)s).PutByIdAndModifyrequestAsync(id, modifyRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IAlbums.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='modifyRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutByIdAndModifyrequestAsync(this IAlbums operations, int id, AlbumDefinition modifyRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutByIdAndModifyrequestWithOperationResponseAsync(id, modifyRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
