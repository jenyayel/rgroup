// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Rg.ClientApp;
using Rg.ClientApp.Models;

namespace Rg.ClientApp
{
    public static partial class UserImagesExtensions
    {
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IUserImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='extension'>
        /// Required.
        /// </param>
        public static string GetByIdAndExtension(this IUserImages operations, int id, string extension)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserImages)s).GetByIdAndExtensionAsync(id, extension);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IUserImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='extension'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetByIdAndExtensionAsync(this IUserImages operations, int id, string extension, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetByIdAndExtensionWithOperationResponseAsync(id, extension, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IUserImages.
        /// </param>
        /// <param name='mediaId'>
        /// Required.
        /// </param>
        /// <param name='extension'>
        /// Required.
        /// </param>
        /// <param name='commentRequest'>
        /// Required.
        /// </param>
        public static object PostCommentByMediaidAndExtensionAndCommentrequest(this IUserImages operations, int mediaId, string extension, CommentRequest commentRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserImages)s).PostCommentByMediaidAndExtensionAndCommentrequestAsync(mediaId, extension, commentRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IUserImages.
        /// </param>
        /// <param name='mediaId'>
        /// Required.
        /// </param>
        /// <param name='extension'>
        /// Required.
        /// </param>
        /// <param name='commentRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostCommentByMediaidAndExtensionAndCommentrequestAsync(this IUserImages operations, int mediaId, string extension, CommentRequest commentRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostCommentByMediaidAndExtensionAndCommentrequestWithOperationResponseAsync(mediaId, extension, commentRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IUserImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='extension'>
        /// Required.
        /// </param>
        /// <param name='likeRequest'>
        /// Required.
        /// </param>
        public static object PostLikeByIdAndExtensionAndLikerequest(this IUserImages operations, int id, string extension, LikeRequest likeRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserImages)s).PostLikeByIdAndExtensionAndLikerequestAsync(id, extension, likeRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.IUserImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='extension'>
        /// Required.
        /// </param>
        /// <param name='likeRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostLikeByIdAndExtensionAndLikerequestAsync(this IUserImages operations, int id, string extension, LikeRequest likeRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostLikeByIdAndExtensionAndLikerequestWithOperationResponseAsync(id, extension, likeRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
