// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Rg.ClientApp;
using Rg.ClientApp.Models;

namespace Rg.ClientApp
{
    public static partial class TimelineExtensions
    {
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static TimelineEntryDetails GetById(this ITimeline operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITimeline)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<TimelineEntryDetails> GetByIdAsync(this ITimeline operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Rg.ClientApp.Models.TimelineEntryDetails> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='since'>
        /// Optional.
        /// </param>
        public static IList<TimelineEntryDetails> GetBySince(this ITimeline operations, string since = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITimeline)s).GetBySinceAsync(since);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='since'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<TimelineEntryDetails>> GetBySinceAsync(this ITimeline operations, string since = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Rg.ClientApp.Models.TimelineEntryDetails>> result = await operations.GetBySinceWithOperationResponseAsync(since, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='createMessage'>
        /// Required.
        /// </param>
        public static object PostByCreatemessage(this ITimeline operations, CreateTimelineEntry createMessage)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITimeline)s).PostByCreatemessageAsync(createMessage);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='createMessage'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostByCreatemessageAsync(this ITimeline operations, CreateTimelineEntry createMessage, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostByCreatemessageWithOperationResponseAsync(createMessage, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='entryId'>
        /// Required.
        /// </param>
        /// <param name='commentRequest'>
        /// Required.
        /// </param>
        public static object PostCommentByEntryidAndCommentrequest(this ITimeline operations, int entryId, CommentRequest commentRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITimeline)s).PostCommentByEntryidAndCommentrequestAsync(entryId, commentRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='entryId'>
        /// Required.
        /// </param>
        /// <param name='commentRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostCommentByEntryidAndCommentrequestAsync(this ITimeline operations, int entryId, CommentRequest commentRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostCommentByEntryidAndCommentrequestWithOperationResponseAsync(entryId, commentRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='entryId'>
        /// Required.
        /// </param>
        /// <param name='likeRequest'>
        /// Required.
        /// </param>
        public static object PostLikeByEntryidAndLikerequest(this ITimeline operations, int entryId, LikeRequest likeRequest)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITimeline)s).PostLikeByEntryidAndLikerequestAsync(entryId, likeRequest);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Rg.ClientApp.ITimeline.
        /// </param>
        /// <param name='entryId'>
        /// Required.
        /// </param>
        /// <param name='likeRequest'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostLikeByEntryidAndLikerequestAsync(this ITimeline operations, int entryId, LikeRequest likeRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostLikeByEntryidAndLikerequestWithOperationResponseAsync(entryId, likeRequest, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
